%% -*- tab-width: 4;erlang-indent-level: 4;indent-tabs-mode: nil -*-
%% ex: ts=4 sw=4 et
[
 %% Riak Core config
 {riak_core, [
              %% Default location of ringstate
              {ring_state_dir, "<%= @data_dir %>/ring"},

              {http, [{"0.0.0.0", 8098}]},

              %% riak_handoff_port is the TCP port that Riak uses for
              %% intra-cluster data handoff.
              {handoff_port, 8099},

              {ring_creation_size, <%= node[:riak][:ring_creation_size] %>},
              
              {disable_http_nagle, <%= @disable_http_nagle %>},
              {platform_bin_dir, "/usr/sbin"},
              {platform_data_dir, "<%= @data_dir %>"},
              {platform_etc_dir, "/etc/riak"},
              {platform_lib_dir, "/usr/lib/riak"},
              {platform_log_dir, "/var/log/riak"}

             ]},

 %% Riak KV config
 {riak_kv, [
            %% Storage_backend specifies the Erlang module defining the storage
            %% mechanism that will be used on this node.
            {storage_backend, <%= @storage_backend %>},

            <% if @erlang_paths -%>
            {add_paths, <%= @erlang_paths %>},
            <% end %>

            %% pb_ip is the IP address that the Riak Protocol Buffers interface
            %% will bid to.  If this is undefined, the interface will not run.
            {pb_ip,   "0.0.0.0" },

            %% pb_port is the TCP port that the Riak Protocol Buffers interface
            %% will bind to
            {pb_port, 8087 },

            %% raw_name is the first part of all URLS used by the Riak raw HTTP
            %% interface.  See riak_web.erl and raw_http_resource.erl for
            %% details.
            %{raw_name, "riak"},

            {mapred_system, "<%= @mapred_system %>"},

            %% mapred_name is URL used to submit map/reduce requests to Riak.
            {mapred_name, "mapred"},
<% if @mapred_system == "legacy" %>
            {mapred_queue_dir, "/var/lib/riak/mr_queue" },
            {map_cache_size, <%= @map_cache_size %>},
            {mapper_batch_size, 5},
<% end %>

            %% js_vm_count is the number of Javascript VMs to start per Riak
            %% node.  8 is a good default for smaller installations. A larger
            %% number like 12 or 16 is appropriate for installations handling
            %% lots of map/reduce processing.
            {map_js_vm_count, <%= @js_vm_count %>},
            {reduce_js_vm_count, <%= @js_vm_count %>},
            {hook_js_vm_count, <%= @js_vm_count %>},

            %% js_max_vm_mem is the maximum amount of memory, in megabytes,
%% allocated to the Javascript VMs. If unset, the default is
            %% 8MB.
            {js_max_vm_mem, <%= @js_max_vm_mem %>},

            %% js_thread_stack is the maximum amount of thread stack, in megabyes,
            %% allocate to the Javascript VMs. If unset, the default is 16MB.
            %% NOTE: This is not the same as the C thread stack.
            {js_thread_stack, <%= @js_thread_stack %>},

            %% js_source_dir should point to a directory containing Javascript
            %% source files which will be loaded by Riak when it initializes
            %% Javascript VMs.
            {js_source_dir, "<%= @js_source_dir %>"},

            %% vnode_mr_timeout controls how much time Riak will permit a map
            %% function to execute on a given vnode before trying another vnode.
            %% Value is in milliseconds and defaults to 1000ms if not set.
            {vnode_mr_timeout, <%= @vnode_mr_timeout %>},

            %% riak_stat enables the use of the "riak-admin status" command to
            %% retrieve information the Riak node for performance and debugging needs
            {riak_kv_stat, true},

            %% http_url_encoding determines how Riak treats URL encoded
            %% buckets, keys, and links over the REST API. When set to 'on'
            %% Riak always decodes encoded values sent as URLs and Headers.
            %% Otherwise, Riak defaults to compatibility mode where links
            %% are decoded, but buckets and keys are not. The compatibility
            %% mode will be removed in a future release.
            {http_url_encoding, on},

            %% When using riak_kv_stat, use the legacy routines for tracking
            {legacy_stats, true},

            %% Switch to vnode-based vclocks rather than client ids.  This
            %% significantly reduces the number of vclock entries.
            %% Only set true if *all* nodes in the cluster are upgraded to 1.0
            {vnode_vclocks, true},

            %% This option enables compatability of bucket and key listing
            %% with 0.14 and earlier versions. Once a rolling upgrade to
            %% a version > 0.14 is completed for a cluster, this should be
            %% set to false for improved performance for bucket and key
            %% listing operations.
            {legacy_keylisting, false}

           ]},

<% if @storage_backend == "riak_kv_bitcask_backend" -%>
 %% Bitcask Config
 {bitcask, [
            {data_root, "<%= @data_root %>"},
            {max_file_size, <%= @max_file_size %>},
            {sync_strategy, <%= @sync_strategy %>},
            {merge_window, <%= @merge_window %>},
            {frag_merge_trigger, <%= @frag_merge_trigger %>},
            {dead_bytes_merge_trigger, <%= @dead_bytes_merge_trigger %>},
            {frag_threshold, <%= @frag_threshold %>},
            {dead_bytes_threshold, <%= @dead_bytes_threshold %>},
            {small_file_threshold, <%= @small_file_threshold %>},
            {expiry_secs, <%= @expiry_secs %>}
           ]},
<% elsif @storage_backend == "riak_kv_innostore_backend" -%>
 %% Innostore Config
 {innostore, [
              {log_buffer_size, <%= @innostore[:log_buffer_size] %>},
              {log_files_in_group, <%= @innostore[:log_files_in_group] %>},
              {log_file_size, <%= @innostore[:log_file_size] %>},
              {flush_log_at_trx_commit, <%= @innostore[:flush_log_at_trx_commit] %>},
              {data_home_dir, "<%= @innostore[:data_home_dir] %>"},
              {log_group_home_dir, "<%= @innostore[:log_group_home_dir]%>"},
              {buffer_pool_size, <%= @innostore[:buffer_pool_size] %>},
              {flush_method, "<%= @innostore[:flush_method] %>"}
             ]},
<% elsif @storage_backend == "riak_kv_eleveldb_backend" -%>
 %% eLevelDB Config
 {eleveldb, [ 
             {data_root, "<%= @leveldb[:data_root] %>"},
             {write_buffer_size, <%= @leveldb[:write_buffer_size]},
             {max_open_files, <%= @leveldb[:max_open_files]},
             {block_size, <%= @leveldb[:block_size]},
             {block_restart_interval, <%= @leveldb[:block_restart_interval]},
             {cache_size, <%= @leveldb[:cache_size]},
             {sync, <%= @leveldb[:sync]},
             {verify_checksums, <%= @leveldb[:verify_checksums]}
            ]}, 
<% end %>
 %% Luwak Config
 {luwak, [
             {enabled, <%= @luwak %>}
         ]},

 %% Lager Config
 {lager, [
            %% What handlers to install with what arguments
            %% The defaults for the logfiles are to rotate the files when
            %% they reach 10Mb or at midnight, whichever comes first, and keep
            %% the last 5 rotations. See the lager README for a description of
            %% the time rotation format:
            %% https://github.com/basho/lager/blob/master/README.org
            %%
            %% If you wish to disable rotation, you can either set the size to 0
            %% and the rotation time to "", or instead specify a 2-tuple that only
            %% consists of {Logfile, Level}.
            {handlers, [
                {lager_console_backend, info},
                {lager_file_backend, [
                    {"/var/log/riak/error.log", error, 10485760, "$D0", 5},
                    {"/var/log/riak/console.log", info, 10485760, "$D0", 5}
                ]}
            ]},

            %% Whether to write a crash log, and where.
            %% Commented/omitted/undefined means no crash logger.
            {crash_log, "/var/log/riak/crash.log"},

            %% Maximum size in bytes of events in the crash log - defaults to 65536
            {crash_log_msg_size, 65536},

            %% Maximum size of the crash log in bytes, before its rotated, set
            %% to 0 to disable rotation - default is 0
            {crash_log_size, 10485760},

            %% What time to rotate the crash log - default is no time
            %% rotation. See the lager README for a description of this format:
            %% https://github.com/basho/lager/blob/master/README.org
            {crash_log_date, "$D0"},

            %% Number of rotated crash logs to keep, 0 means keep only the
            %% current one - default is 0
            {crash_log_count, 5},

            %% Whether to redirect error_logger messages into lager - defaults to true
            {error_logger_redirect, true}
        ]},

 %% riak_sysmon config
 {riak_sysmon, [
         %% To disable forwarding events of a particular type, use a
         %% limit of 0.
         {process_limit, 30},
         {port_limit, 30},

         %% Finding reasonable limits for a given workload is a matter
         %% of experimentation.
         {gc_ms_limit, 50},
         {heap_word_limit, 10485760}
        ]},

 %% SASL config
 {sasl, [
         {sasl_error_logger, false}
         ]}

<% if node[:riak][:search_enabled] %>
 ,{riak_search, [
                 {search_backend, <%= node[:riak][:search][:search_backend] %>},
                 {java_home, "/usr"},
                 {max_search_results, <%= node[:riak][:search][:max_search_results] %>}
                ]},
 {qilr, [
         %% NOTE: Change with 0.14 release: by default, JVM text analyzer is
         %% disabled via missing/commented 'analysis_port' option or
         %% via {analysis_port, undefined}. 
         %% Uncomment the following line in order to use JVM Lucene-based text analyzers.
         %% {analysis_port, 6095 },
         
         {backend_conn_count, 50}
        ]},

 %% Solr Endpoint configuration
 {riak_solr, [
              {solr_name, "<%= node[:riak][:search][:solr_name] %>"},
              {default_schema, "<%= node[:riak][:search][:default_schema] %>"}
             ]},

 %% Merge Index Config
 {merge_index, [
                {data_root, "<%= node[:riak][:search][:data_root] %>"},
                {buffer_rollover_size, <%= node[:riak][:search][:buffer_rollover_size] %>},
                {buffer_delayed_write_size, <%= node[:riak][:search][:buffer_delayed_write_size] %>},
                {buffer_delayed_write_ms, <%= node[:riak][:search][:buffer_delayed_write_ms] %>},
                {max_compact_segments, <%= node[:riak][:search][:max_compact_segments] %>},
                {fold_batch_size, <%= node[:riak][:search][:fold_batch_size] %>},
                {segment_query_read_ahead_size, <%= node[:riak][:search][:segment_query_read_ahead_size] %>},
                {segment_compaction_read_ahead_size, <%= node[:riak][:search][:segment_compaction_read_ahead_size] %>},
                {segment_file_buffer_size, <%= node[:riak][:search][:segment_file_buffer_size] %>},
                {segment_delayed_write_size, <%= node[:riak][:search][:segment_delayed_write_size] %>},
                {segment_delayed_write_ms, <%= node[:riak][:search][:segment_delayed_write_ms] %>},
                {segment_full_read_size, <%= node[:riak][:search][:segment_full_read_size] %>},
                {segment_block_size, <%= node[:riak][:search][:segment_block_size] %>},
                {segment_values_staging_size, <%= node[:riak][:search][:segment_values_staging_size] %>},
                {segment_values_compression_threshold, <%= node[:riak][:search][:segment_values_compression_threshold] %>},
                {segment_values_compression_level, <%= node[:riak][:search][:segment_values_compression_level] %>}
               ]}
<% end %>
].

